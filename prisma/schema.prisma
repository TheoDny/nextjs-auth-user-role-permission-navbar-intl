// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "./generated/"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id               String    @id @default(cuid())
    email            String    @unique
    name             String?
    emailVerified    Boolean   @default(false)
    image            String?
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @default(now()) @updatedAt
    sessions         Session[]
    accounts         Account[]
    active           Boolean   @default(true)
    Roles            Role[]
    Entities         Entity[]
    entitySelectedId String
    EntitySelected   Entity    @relation("entitySelected", fields: [entitySelectedId], references: [id])
    Logs             Log[]

    @@map("user")
}

model Session {
    id        String   @id
    expiresAt DateTime
    token     String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([token])
    @@map("session")
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime  @default(now())
    updatedAt             DateTime  @default(now()) @updatedAt

    @@map("account")
}

model Verification {
    id         String    @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime?
    updatedAt  DateTime?

    @@map("verification")
}

model TokenCreateUser {
    id        String   @id @default(cuid())
    email     String
    token     String
    expiresAt DateTime
    createdAt DateTime @default(now())

    @@map("token_create_account")
}

model Permission {
    code  String @id
    Roles Role[]

    @@map("permission")
}

model Role {
    id          String       @id @default(cuid())
    name        String
    description String
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @default(now()) @updatedAt
    deletedAt   DateTime?
    Permissions Permission[]
    Users       User[]

    @@map("role")
}

model Entity {
    id               String           @id @default(cuid())
    name             String
    createdAt        DateTime         @default(now())
    updatedAt        DateTime         @default(now()) @updatedAt
    deletedAt        DateTime?
    Users            User[]
    UserWithSelected User[]           @relation("entitySelected")
    logs             Log[]

    @@map("entity")
}

enum LogType {
    user_create
    user_update
    user_set_role
    user_disable
    user_enable
    user_email_verified
    user_set_entity

    role_create
    role_update
    role_delete
    role_set_permission

    entity_update
    entity_disable
    entity_enable
}

model Log {
    id           String   @id @default(cuid())
    actionDate   DateTime @default(now())
    actionType   LogType
    actionDetail Json
    User         User     @relation(fields: [userId], references: [id])
    userId       String
    Entity       Entity?   @relation(fields: [entityId], references: [id])
    entityId     String?

    @@map("log")
}